package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/models"
)

// UpdatePackageReader is a Reader for the UpdatePackage structure.
type UpdatePackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePackageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatePackageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdatePackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdatePackageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 413:
		result := NewUpdatePackageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdatePackageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePackageOK creates a UpdatePackageOK with default headers values
func NewUpdatePackageOK() *UpdatePackageOK {
	return &UpdatePackageOK{}
}

/*UpdatePackageOK handles this case with default header values.

Updated Item
*/
type UpdatePackageOK struct {
	Payload *models.ItemID
}

func (o *UpdatePackageOK) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/packages/{packageName}][%d] updatePackageOK  %+v", 200, o.Payload)
}

func (o *UpdatePackageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ItemID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackageBadRequest creates a UpdatePackageBadRequest with default headers values
func NewUpdatePackageBadRequest() *UpdatePackageBadRequest {
	return &UpdatePackageBadRequest{}
}

/*UpdatePackageBadRequest handles this case with default header values.

Bad request
*/
type UpdatePackageBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *UpdatePackageBadRequest) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/packages/{packageName}][%d] updatePackageBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePackageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackageUnauthorized creates a UpdatePackageUnauthorized with default headers values
func NewUpdatePackageUnauthorized() *UpdatePackageUnauthorized {
	return &UpdatePackageUnauthorized{}
}

/*UpdatePackageUnauthorized handles this case with default header values.

Unauthorized request
*/
type UpdatePackageUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *UpdatePackageUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/packages/{packageName}][%d] updatePackageUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackageConflict creates a UpdatePackageConflict with default headers values
func NewUpdatePackageConflict() *UpdatePackageConflict {
	return &UpdatePackageConflict{}
}

/*UpdatePackageConflict handles this case with default header values.

Conflicting item already exists
*/
type UpdatePackageConflict struct {
	Payload *models.ErrorMessage
}

func (o *UpdatePackageConflict) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/packages/{packageName}][%d] updatePackageConflict  %+v", 409, o.Payload)
}

func (o *UpdatePackageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackageRequestEntityTooLarge creates a UpdatePackageRequestEntityTooLarge with default headers values
func NewUpdatePackageRequestEntityTooLarge() *UpdatePackageRequestEntityTooLarge {
	return &UpdatePackageRequestEntityTooLarge{}
}

/*UpdatePackageRequestEntityTooLarge handles this case with default header values.

Request entity too large
*/
type UpdatePackageRequestEntityTooLarge struct {
	Payload *models.ErrorMessage
}

func (o *UpdatePackageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/packages/{packageName}][%d] updatePackageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdatePackageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePackageInternalServerError creates a UpdatePackageInternalServerError with default headers values
func NewUpdatePackageInternalServerError() *UpdatePackageInternalServerError {
	return &UpdatePackageInternalServerError{}
}

/*UpdatePackageInternalServerError handles this case with default header values.

Server error
*/
type UpdatePackageInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *UpdatePackageInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/packages/{packageName}][%d] updatePackageInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePackageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
