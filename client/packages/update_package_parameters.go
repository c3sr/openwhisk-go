package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/models"
)

// NewUpdatePackageParams creates a new UpdatePackageParams object
// with the default values initialized.
func NewUpdatePackageParams() *UpdatePackageParams {
	var ()
	return &UpdatePackageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePackageParamsWithTimeout creates a new UpdatePackageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePackageParamsWithTimeout(timeout time.Duration) *UpdatePackageParams {
	var ()
	return &UpdatePackageParams{

		timeout: timeout,
	}
}

// NewUpdatePackageParamsWithContext creates a new UpdatePackageParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePackageParamsWithContext(ctx context.Context) *UpdatePackageParams {
	var ()
	return &UpdatePackageParams{

		Context: ctx,
	}
}

/*UpdatePackageParams contains all the parameters to send to the API endpoint
for the update package operation typically these are written to a http.Request
*/
type UpdatePackageParams struct {

	/*Namespace
	  The entity namespace

	*/
	Namespace string
	/*Overwrite
	  Overwrite item if it exists. Default is false.

	*/
	Overwrite *string
	/*Package
	  The package being updated

	*/
	Package *models.PackagePut
	/*PackageName
	  Name of package

	*/
	PackageName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update package params
func (o *UpdatePackageParams) WithTimeout(timeout time.Duration) *UpdatePackageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update package params
func (o *UpdatePackageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update package params
func (o *UpdatePackageParams) WithContext(ctx context.Context) *UpdatePackageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update package params
func (o *UpdatePackageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithNamespace adds the namespace to the update package params
func (o *UpdatePackageParams) WithNamespace(namespace string) *UpdatePackageParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the update package params
func (o *UpdatePackageParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOverwrite adds the overwrite to the update package params
func (o *UpdatePackageParams) WithOverwrite(overwrite *string) *UpdatePackageParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the update package params
func (o *UpdatePackageParams) SetOverwrite(overwrite *string) {
	o.Overwrite = overwrite
}

// WithPackage adds the packageVar to the update package params
func (o *UpdatePackageParams) WithPackage(packageVar *models.PackagePut) *UpdatePackageParams {
	o.SetPackage(packageVar)
	return o
}

// SetPackage adds the package to the update package params
func (o *UpdatePackageParams) SetPackage(packageVar *models.PackagePut) {
	o.Package = packageVar
}

// WithPackageName adds the packageName to the update package params
func (o *UpdatePackageParams) WithPackageName(packageName string) *UpdatePackageParams {
	o.SetPackageName(packageName)
	return o
}

// SetPackageName adds the packageName to the update package params
func (o *UpdatePackageParams) SetPackageName(packageName string) {
	o.PackageName = packageName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePackageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite string
		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := qrOverwrite
		if qOverwrite != "" {
			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}

	}

	if o.Package == nil {
		o.Package = new(models.PackagePut)
	}

	if err := r.SetBodyParam(o.Package); err != nil {
		return err
	}

	// path param packageName
	if err := r.SetPathParam("packageName", o.PackageName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
