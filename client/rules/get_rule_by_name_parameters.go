package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRuleByNameParams creates a new GetRuleByNameParams object
// with the default values initialized.
func NewGetRuleByNameParams() *GetRuleByNameParams {
	var ()
	return &GetRuleByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRuleByNameParamsWithTimeout creates a new GetRuleByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRuleByNameParamsWithTimeout(timeout time.Duration) *GetRuleByNameParams {
	var ()
	return &GetRuleByNameParams{

		timeout: timeout,
	}
}

// NewGetRuleByNameParamsWithContext creates a new GetRuleByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRuleByNameParamsWithContext(ctx context.Context) *GetRuleByNameParams {
	var ()
	return &GetRuleByNameParams{

		Context: ctx,
	}
}

/*GetRuleByNameParams contains all the parameters to send to the API endpoint
for the get rule by name operation typically these are written to a http.Request
*/
type GetRuleByNameParams struct {

	/*Namespace
	  The entity namespace

	*/
	Namespace string
	/*RuleName
	  Name of rule to fetch

	*/
	RuleName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get rule by name params
func (o *GetRuleByNameParams) WithTimeout(timeout time.Duration) *GetRuleByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get rule by name params
func (o *GetRuleByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get rule by name params
func (o *GetRuleByNameParams) WithContext(ctx context.Context) *GetRuleByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get rule by name params
func (o *GetRuleByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithNamespace adds the namespace to the get rule by name params
func (o *GetRuleByNameParams) WithNamespace(namespace string) *GetRuleByNameParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get rule by name params
func (o *GetRuleByNameParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithRuleName adds the ruleName to the get rule by name params
func (o *GetRuleByNameParams) WithRuleName(ruleName string) *GetRuleByNameParams {
	o.SetRuleName(ruleName)
	return o
}

// SetRuleName adds the ruleName to the get rule by name params
func (o *GetRuleByNameParams) SetRuleName(ruleName string) {
	o.RuleName = ruleName
}

// WriteToRequest writes these params to a swagger request
func (o *GetRuleByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param ruleName
	if err := r.SetPathParam("ruleName", o.RuleName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
