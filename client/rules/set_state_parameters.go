package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetStateParams creates a new SetStateParams object
// with the default values initialized.
func NewSetStateParams() *SetStateParams {
	var ()
	return &SetStateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetStateParamsWithTimeout creates a new SetStateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetStateParamsWithTimeout(timeout time.Duration) *SetStateParams {
	var ()
	return &SetStateParams{

		timeout: timeout,
	}
}

// NewSetStateParamsWithContext creates a new SetStateParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetStateParamsWithContext(ctx context.Context) *SetStateParams {
	var ()
	return &SetStateParams{

		Context: ctx,
	}
}

/*SetStateParams contains all the parameters to send to the API endpoint
for the set state operation typically these are written to a http.Request
*/
type SetStateParams struct {

	/*Namespace
	  The entity namespace

	*/
	Namespace string
	/*RuleName
	  Name of rule to update

	*/
	RuleName string
	/*State
	  Set state to enable or disable

	*/
	State string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set state params
func (o *SetStateParams) WithTimeout(timeout time.Duration) *SetStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set state params
func (o *SetStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set state params
func (o *SetStateParams) WithContext(ctx context.Context) *SetStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set state params
func (o *SetStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithNamespace adds the namespace to the set state params
func (o *SetStateParams) WithNamespace(namespace string) *SetStateParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the set state params
func (o *SetStateParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithRuleName adds the ruleName to the set state params
func (o *SetStateParams) WithRuleName(ruleName string) *SetStateParams {
	o.SetRuleName(ruleName)
	return o
}

// SetRuleName adds the ruleName to the set state params
func (o *SetStateParams) SetRuleName(ruleName string) {
	o.RuleName = ruleName
}

// WithState adds the state to the set state params
func (o *SetStateParams) WithState(state string) *SetStateParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the set state params
func (o *SetStateParams) SetState(state string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *SetStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param ruleName
	if err := r.SetPathParam("ruleName", o.RuleName); err != nil {
		return err
	}

	// query param state
	qrState := o.State
	qState := qrState
	if qState != "" {
		if err := r.SetQueryParam("state", qState); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
