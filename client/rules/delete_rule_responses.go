package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/models"
)

// DeleteRuleReader is a Reader for the DeleteRule structure.
type DeleteRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRuleOK creates a DeleteRuleOK with default headers values
func NewDeleteRuleOK() *DeleteRuleOK {
	return &DeleteRuleOK{}
}

/*DeleteRuleOK handles this case with default header values.

Deleted Item
*/
type DeleteRuleOK struct {
}

func (o *DeleteRuleOK) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/rules/{ruleName}][%d] deleteRuleOK ", 200)
}

func (o *DeleteRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRuleUnauthorized creates a DeleteRuleUnauthorized with default headers values
func NewDeleteRuleUnauthorized() *DeleteRuleUnauthorized {
	return &DeleteRuleUnauthorized{}
}

/*DeleteRuleUnauthorized handles this case with default header values.

Unauthorized request
*/
type DeleteRuleUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *DeleteRuleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/rules/{ruleName}][%d] deleteRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleNotFound creates a DeleteRuleNotFound with default headers values
func NewDeleteRuleNotFound() *DeleteRuleNotFound {
	return &DeleteRuleNotFound{}
}

/*DeleteRuleNotFound handles this case with default header values.

Item not found
*/
type DeleteRuleNotFound struct {
	Payload *models.ErrorMessage
}

func (o *DeleteRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/rules/{ruleName}][%d] deleteRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleInternalServerError creates a DeleteRuleInternalServerError with default headers values
func NewDeleteRuleInternalServerError() *DeleteRuleInternalServerError {
	return &DeleteRuleInternalServerError{}
}

/*DeleteRuleInternalServerError handles this case with default header values.

Server error
*/
type DeleteRuleInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *DeleteRuleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/rules/{ruleName}][%d] deleteRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
