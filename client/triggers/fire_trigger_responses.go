package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/models"
)

// FireTriggerReader is a Reader for the FireTrigger structure.
type FireTriggerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FireTriggerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFireTriggerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewFireTriggerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFireTriggerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewFireTriggerRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewFireTriggerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFireTriggerOK creates a FireTriggerOK with default headers values
func NewFireTriggerOK() *FireTriggerOK {
	return &FireTriggerOK{}
}

/*FireTriggerOK handles this case with default header values.

Activation id
*/
type FireTriggerOK struct {
	Payload *models.ItemID
}

func (o *FireTriggerOK) Error() string {
	return fmt.Sprintf("[POST /namespaces/{namespace}/triggers/{triggerName}][%d] fireTriggerOK  %+v", 200, o.Payload)
}

func (o *FireTriggerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ItemID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFireTriggerUnauthorized creates a FireTriggerUnauthorized with default headers values
func NewFireTriggerUnauthorized() *FireTriggerUnauthorized {
	return &FireTriggerUnauthorized{}
}

/*FireTriggerUnauthorized handles this case with default header values.

Unauthorized request
*/
type FireTriggerUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *FireTriggerUnauthorized) Error() string {
	return fmt.Sprintf("[POST /namespaces/{namespace}/triggers/{triggerName}][%d] fireTriggerUnauthorized  %+v", 401, o.Payload)
}

func (o *FireTriggerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFireTriggerNotFound creates a FireTriggerNotFound with default headers values
func NewFireTriggerNotFound() *FireTriggerNotFound {
	return &FireTriggerNotFound{}
}

/*FireTriggerNotFound handles this case with default header values.

Item not found
*/
type FireTriggerNotFound struct {
	Payload *models.ErrorMessage
}

func (o *FireTriggerNotFound) Error() string {
	return fmt.Sprintf("[POST /namespaces/{namespace}/triggers/{triggerName}][%d] fireTriggerNotFound  %+v", 404, o.Payload)
}

func (o *FireTriggerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFireTriggerRequestTimeout creates a FireTriggerRequestTimeout with default headers values
func NewFireTriggerRequestTimeout() *FireTriggerRequestTimeout {
	return &FireTriggerRequestTimeout{}
}

/*FireTriggerRequestTimeout handles this case with default header values.

Request timed out
*/
type FireTriggerRequestTimeout struct {
}

func (o *FireTriggerRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /namespaces/{namespace}/triggers/{triggerName}][%d] fireTriggerRequestTimeout ", 408)
}

func (o *FireTriggerRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFireTriggerInternalServerError creates a FireTriggerInternalServerError with default headers values
func NewFireTriggerInternalServerError() *FireTriggerInternalServerError {
	return &FireTriggerInternalServerError{}
}

/*FireTriggerInternalServerError handles this case with default header values.

Server error
*/
type FireTriggerInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *FireTriggerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /namespaces/{namespace}/triggers/{triggerName}][%d] fireTriggerInternalServerError  %+v", 500, o.Payload)
}

func (o *FireTriggerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
