package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/models"
)

// DeleteActionReader is a Reader for the DeleteAction structure.
type DeleteActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteActionOK creates a DeleteActionOK with default headers values
func NewDeleteActionOK() *DeleteActionOK {
	return &DeleteActionOK{}
}

/*DeleteActionOK handles this case with default header values.

Deleted Item
*/
type DeleteActionOK struct {
}

func (o *DeleteActionOK) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/actions/{actionName}][%d] deleteActionOK ", 200)
}

func (o *DeleteActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteActionUnauthorized creates a DeleteActionUnauthorized with default headers values
func NewDeleteActionUnauthorized() *DeleteActionUnauthorized {
	return &DeleteActionUnauthorized{}
}

/*DeleteActionUnauthorized handles this case with default header values.

Unauthorized request
*/
type DeleteActionUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *DeleteActionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/actions/{actionName}][%d] deleteActionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionNotFound creates a DeleteActionNotFound with default headers values
func NewDeleteActionNotFound() *DeleteActionNotFound {
	return &DeleteActionNotFound{}
}

/*DeleteActionNotFound handles this case with default header values.

Item not found
*/
type DeleteActionNotFound struct {
	Payload *models.ErrorMessage
}

func (o *DeleteActionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/actions/{actionName}][%d] deleteActionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionInternalServerError creates a DeleteActionInternalServerError with default headers values
func NewDeleteActionInternalServerError() *DeleteActionInternalServerError {
	return &DeleteActionInternalServerError{}
}

/*DeleteActionInternalServerError handles this case with default header values.

Server error
*/
type DeleteActionInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *DeleteActionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /namespaces/{namespace}/actions/{actionName}][%d] deleteActionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
