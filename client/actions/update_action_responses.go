package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/models"
)

// UpdateActionReader is a Reader for the UpdateAction structure.
type UpdateActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateActionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 413:
		result := NewUpdateActionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateActionOK creates a UpdateActionOK with default headers values
func NewUpdateActionOK() *UpdateActionOK {
	return &UpdateActionOK{}
}

/*UpdateActionOK handles this case with default header values.

Updated Item
*/
type UpdateActionOK struct {
	Payload *models.ItemID
}

func (o *UpdateActionOK) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/actions/{actionName}][%d] updateActionOK  %+v", 200, o.Payload)
}

func (o *UpdateActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ItemID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionBadRequest creates a UpdateActionBadRequest with default headers values
func NewUpdateActionBadRequest() *UpdateActionBadRequest {
	return &UpdateActionBadRequest{}
}

/*UpdateActionBadRequest handles this case with default header values.

Bad request
*/
type UpdateActionBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *UpdateActionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/actions/{actionName}][%d] updateActionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionUnauthorized creates a UpdateActionUnauthorized with default headers values
func NewUpdateActionUnauthorized() *UpdateActionUnauthorized {
	return &UpdateActionUnauthorized{}
}

/*UpdateActionUnauthorized handles this case with default header values.

Unauthorized request
*/
type UpdateActionUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *UpdateActionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/actions/{actionName}][%d] updateActionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionConflict creates a UpdateActionConflict with default headers values
func NewUpdateActionConflict() *UpdateActionConflict {
	return &UpdateActionConflict{}
}

/*UpdateActionConflict handles this case with default header values.

Conflicting item already exists
*/
type UpdateActionConflict struct {
	Payload *models.ErrorMessage
}

func (o *UpdateActionConflict) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/actions/{actionName}][%d] updateActionConflict  %+v", 409, o.Payload)
}

func (o *UpdateActionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionRequestEntityTooLarge creates a UpdateActionRequestEntityTooLarge with default headers values
func NewUpdateActionRequestEntityTooLarge() *UpdateActionRequestEntityTooLarge {
	return &UpdateActionRequestEntityTooLarge{}
}

/*UpdateActionRequestEntityTooLarge handles this case with default header values.

Request entity too large
*/
type UpdateActionRequestEntityTooLarge struct {
	Payload *models.ErrorMessage
}

func (o *UpdateActionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/actions/{actionName}][%d] updateActionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateActionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionInternalServerError creates a UpdateActionInternalServerError with default headers values
func NewUpdateActionInternalServerError() *UpdateActionInternalServerError {
	return &UpdateActionInternalServerError{}
}

/*UpdateActionInternalServerError handles this case with default header values.

Server error
*/
type UpdateActionInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *UpdateActionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /namespaces/{namespace}/actions/{actionName}][%d] updateActionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
