package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetActionByNameParams creates a new GetActionByNameParams object
// with the default values initialized.
func NewGetActionByNameParams() *GetActionByNameParams {
	var ()
	return &GetActionByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActionByNameParamsWithTimeout creates a new GetActionByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActionByNameParamsWithTimeout(timeout time.Duration) *GetActionByNameParams {
	var ()
	return &GetActionByNameParams{

		timeout: timeout,
	}
}

// NewGetActionByNameParamsWithContext creates a new GetActionByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActionByNameParamsWithContext(ctx context.Context) *GetActionByNameParams {
	var ()
	return &GetActionByNameParams{

		Context: ctx,
	}
}

/*GetActionByNameParams contains all the parameters to send to the API endpoint
for the get action by name operation typically these are written to a http.Request
*/
type GetActionByNameParams struct {

	/*ActionName
	  Name of action to fetch

	*/
	ActionName string
	/*Namespace
	  The entity namespace

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get action by name params
func (o *GetActionByNameParams) WithTimeout(timeout time.Duration) *GetActionByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get action by name params
func (o *GetActionByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get action by name params
func (o *GetActionByNameParams) WithContext(ctx context.Context) *GetActionByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get action by name params
func (o *GetActionByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithActionName adds the actionName to the get action by name params
func (o *GetActionByNameParams) WithActionName(actionName string) *GetActionByNameParams {
	o.SetActionName(actionName)
	return o
}

// SetActionName adds the actionName to the get action by name params
func (o *GetActionByNameParams) SetActionName(actionName string) {
	o.ActionName = actionName
}

// WithNamespace adds the namespace to the get action by name params
func (o *GetActionByNameParams) WithNamespace(namespace string) *GetActionByNameParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get action by name params
func (o *GetActionByNameParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *GetActionByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param actionName
	if err := r.SetPathParam("actionName", o.ActionName); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
