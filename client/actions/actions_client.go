package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new actions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for actions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAction deletes an action

Delete an action
*/
func (a *Client) DeleteAction(params *DeleteActionParams) (*DeleteActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAction",
		Method:             "DELETE",
		PathPattern:        "/namespaces/{namespace}/actions/{actionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteActionOK), nil

}

/*
GetActionByName gets action information

Get action information.
*/
func (a *Client) GetActionByName(params *GetActionByNameParams) (*GetActionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionByName",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/actions/{actionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActionByNameOK), nil

}

/*
GetAllActions gets all actions

Get all actions
*/
func (a *Client) GetAllActions(params *GetAllActionsParams) (*GetAllActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllActions",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllActionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllActionsOK), nil

}

/*
InvokeAction invokes an action

Invoke an action
*/
func (a *Client) InvokeAction(params *InvokeActionParams) (*InvokeActionOK, *InvokeActionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invokeAction",
		Method:             "POST",
		PathPattern:        "/namespaces/{namespace}/actions/{actionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvokeActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InvokeActionOK:
		return value, nil, nil
	case *InvokeActionAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateAction creates or update an action

Create or update an action
*/
func (a *Client) UpdateAction(params *UpdateActionParams) (*UpdateActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAction",
		Method:             "PUT",
		PathPattern:        "/namespaces/{namespace}/actions/{actionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateActionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
