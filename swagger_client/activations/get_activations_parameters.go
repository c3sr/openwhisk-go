package activations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetActivationsParams creates a new GetActivationsParams object
// with the default values initialized.
func NewGetActivationsParams() *GetActivationsParams {
	var ()
	return &GetActivationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActivationsParamsWithTimeout creates a new GetActivationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActivationsParamsWithTimeout(timeout time.Duration) *GetActivationsParams {
	var ()
	return &GetActivationsParams{

		timeout: timeout,
	}
}

// NewGetActivationsParamsWithContext creates a new GetActivationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActivationsParamsWithContext(ctx context.Context) *GetActivationsParams {
	var ()
	return &GetActivationsParams{

		Context: ctx,
	}
}

/*GetActivationsParams contains all the parameters to send to the API endpoint
for the get activations operation typically these are written to a http.Request
*/
type GetActivationsParams struct {

	/*Docs
	  Whether to include full entity description.

	*/
	Docs *bool
	/*Limit
	  Number of entities to include in the result.

	*/
	Limit *int64
	/*Name
	  Name of item

	*/
	Name *string
	/*Namespace
	  The entity namespace

	*/
	Namespace string
	/*Since
	  Only include entities later than this timestamp (measured in milliseconds since Thu, 01 Jan 1970)

	*/
	Since *int64
	/*Skip
	  Number of entities to skip in the result.

	*/
	Skip *int64
	/*Upto
	  Only include entities earlier than this timestamp (measured in milliseconds since Thu, 01 Jan 1970)

	*/
	Upto *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get activations params
func (o *GetActivationsParams) WithTimeout(timeout time.Duration) *GetActivationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get activations params
func (o *GetActivationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get activations params
func (o *GetActivationsParams) WithContext(ctx context.Context) *GetActivationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get activations params
func (o *GetActivationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithDocs adds the docs to the get activations params
func (o *GetActivationsParams) WithDocs(docs *bool) *GetActivationsParams {
	o.SetDocs(docs)
	return o
}

// SetDocs adds the docs to the get activations params
func (o *GetActivationsParams) SetDocs(docs *bool) {
	o.Docs = docs
}

// WithLimit adds the limit to the get activations params
func (o *GetActivationsParams) WithLimit(limit *int64) *GetActivationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get activations params
func (o *GetActivationsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get activations params
func (o *GetActivationsParams) WithName(name *string) *GetActivationsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get activations params
func (o *GetActivationsParams) SetName(name *string) {
	o.Name = name
}

// WithNamespace adds the namespace to the get activations params
func (o *GetActivationsParams) WithNamespace(namespace string) *GetActivationsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get activations params
func (o *GetActivationsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithSince adds the since to the get activations params
func (o *GetActivationsParams) WithSince(since *int64) *GetActivationsParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get activations params
func (o *GetActivationsParams) SetSince(since *int64) {
	o.Since = since
}

// WithSkip adds the skip to the get activations params
func (o *GetActivationsParams) WithSkip(skip *int64) *GetActivationsParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get activations params
func (o *GetActivationsParams) SetSkip(skip *int64) {
	o.Skip = skip
}

// WithUpto adds the upto to the get activations params
func (o *GetActivationsParams) WithUpto(upto *int64) *GetActivationsParams {
	o.SetUpto(upto)
	return o
}

// SetUpto adds the upto to the get activations params
func (o *GetActivationsParams) SetUpto(upto *int64) {
	o.Upto = upto
}

// WriteToRequest writes these params to a swagger request
func (o *GetActivationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Docs != nil {

		// query param docs
		var qrDocs bool
		if o.Docs != nil {
			qrDocs = *o.Docs
		}
		qDocs := swag.FormatBool(qrDocs)
		if qDocs != "" {
			if err := r.SetQueryParam("docs", qDocs); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.Upto != nil {

		// query param upto
		var qrUpto int64
		if o.Upto != nil {
			qrUpto = *o.Upto
		}
		qUpto := swag.FormatInt64(qrUpto)
		if qUpto != "" {
			if err := r.SetQueryParam("upto", qUpto); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
