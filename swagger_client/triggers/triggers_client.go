package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new triggers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for triggers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTrigger deletes a trigger

Delete a trigger
*/
func (a *Client) DeleteTrigger(params *DeleteTriggerParams) (*DeleteTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTrigger",
		Method:             "DELETE",
		PathPattern:        "/namespaces/{namespace}/triggers/{triggerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTriggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTriggerOK), nil

}

/*
FireTrigger fires a trigger

Fire a trigger
*/
func (a *Client) FireTrigger(params *FireTriggerParams) (*FireTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFireTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fireTrigger",
		Method:             "POST",
		PathPattern:        "/namespaces/{namespace}/triggers/{triggerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FireTriggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FireTriggerOK), nil

}

/*
GetAllTriggers gets all triggers

Get all triggers
*/
func (a *Client) GetAllTriggers(params *GetAllTriggersParams) (*GetAllTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllTriggers",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTriggersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllTriggersOK), nil

}

/*
GetTriggerByName gets trigger information

Get trigger information
*/
func (a *Client) GetTriggerByName(params *GetTriggerByNameParams) (*GetTriggerByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggerByName",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/triggers/{triggerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTriggerByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTriggerByNameOK), nil

}

/*
UpdateTrigger updates a trigger

Update a trigger
*/
func (a *Client) UpdateTrigger(params *UpdateTriggerParams) (*UpdateTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTrigger",
		Method:             "PUT",
		PathPattern:        "/namespaces/{namespace}/triggers/{triggerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTriggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTriggerOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
