package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new packages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for packages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePackage deletes a package

Delete a package
*/
func (a *Client) DeletePackage(params *DeletePackageParams) (*DeletePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePackage",
		Method:             "DELETE",
		PathPattern:        "/namespaces/{namespace}/packages/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePackageOK), nil

}

/*
GetAlPackages gets all packages

Get all packages
*/
func (a *Client) GetAlPackages(params *GetAlPackagesParams) (*GetAlPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlPackagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlPackages",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlPackagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlPackagesOK), nil

}

/*
GetPackageByName gets package information

Get package information.
*/
func (a *Client) GetPackageByName(params *GetPackageByNameParams) (*GetPackageByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageByName",
		Method:             "GET",
		PathPattern:        "/namespaces/{namespace}/packages/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPackageByNameOK), nil

}

/*
UpdatePackage creates or update a package

Create or update a package
*/
func (a *Client) UpdatePackage(params *UpdatePackageParams) (*UpdatePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePackage",
		Method:             "PUT",
		PathPattern:        "/namespaces/{namespace}/packages/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePackageOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
