package swagger_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/c3sr/openwhisk-go/swagger_client/actions"
	"github.com/c3sr/openwhisk-go/swagger_client/activations"
	"github.com/c3sr/openwhisk-go/swagger_client/namespaces"
	"github.com/c3sr/openwhisk-go/swagger_client/packages"
	"github.com/c3sr/openwhisk-go/swagger_client/rules"
	"github.com/c3sr/openwhisk-go/swagger_client/triggers"
)

// Default open whisk r e s t HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new open whisk r e s t HTTP client.
func NewHTTPClient(formats strfmt.Registry) *OpenWhiskREST {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("localhost", "/api/v1", []string{"http"})
	return New(transport, formats)
}

// New creates a new open whisk r e s t client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *OpenWhiskREST {
	cli := new(OpenWhiskREST)
	cli.Transport = transport

	cli.Actions = actions.New(transport, formats)

	cli.Activations = activations.New(transport, formats)

	cli.Namespaces = namespaces.New(transport, formats)

	cli.Packages = packages.New(transport, formats)

	cli.Rules = rules.New(transport, formats)

	cli.Triggers = triggers.New(transport, formats)

	return cli
}

// OpenWhiskREST is a client for open whisk r e s t
type OpenWhiskREST struct {
	Actions *actions.Client

	Activations *activations.Client

	Namespaces *namespaces.Client

	Packages *packages.Client

	Rules *rules.Client

	Triggers *triggers.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *OpenWhiskREST) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Actions.SetTransport(transport)

	c.Activations.SetTransport(transport)

	c.Namespaces.SetTransport(transport)

	c.Packages.SetTransport(transport)

	c.Rules.SetTransport(transport)

	c.Triggers.SetTransport(transport)

}
